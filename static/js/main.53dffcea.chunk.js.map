{"version":3,"sources":["OpenLink.tsx","FormWithout.tsx","FormWith.tsx","GradeCalculatorWith.tsx","GradeCalculatorWithout.tsx","Error.tsx","Home.tsx","Search.tsx","App.tsx","reportWebVitals.ts","header.tsx","index.tsx"],"names":["OpenLink","_ref","url","startUrl","window","location","href","split","_useState","useState","_useState2","_slicedToArray","isCopied","setIsCopied","React","createElement","className","target","type","id","value","readOnly","onClick","navigator","clipboard","writeText","setTimeout","FontAwesomeIcon","icon","faClipboardCheck","faCopy","FormWithout","showButtons","setShowButtons","_useState3","_useState4","setUrlLoad","_useState5","_useState6","values","setValues","handleInputChange","event","_event$target","name","index","dataset","newValue","_objectSpread","_defineProperty","onSubmit","preventDefault","isEmpty","Object","every","matter","coefficient","keys","length","console","log","t","map","replace","key","htmlFor","concat","pattern","data-index","onChange","required","filteredValues","fromEntries","entries","filter","_ref2","removeMatter","faTrash","FormWith","groups","matters","visible","newGroup","groupIndex","Number","matterIndex","parseInt","group","newMatter","newMatters","_toConsumableArray","_objectSpread3","newGroups","switchVisibility","arguments","undefined","some","verif","forEach","t1","t2","faChevronUp","style","display","faChevronLeft","placeholder","data-group-index","confirm","removeGroup","data-matter-index","addNewMatter","GradeCalculatorWith","groupsParam","URLSearchParams","search","get","param","coef","_param$split","_param$split2","_subjects$split","_subjects$split2","matterString","numbCoeff","Error","includes","parseFloat","tabMatterString","coefMatter","_param$split3","_param$split4","mattersName","mattersCoef","coeff","initialMarks","subject","marks","setMarks","handleMarkChange","totalCoeff","totalPoints","groupCoeff","groupPoints","alert","toFixed","GradeCalculatorWithout","subjectsParam","subjects","cNumb","reduce","acc","totalGrade","Home","faTwitter","faInstagram","faLinkedin","faGithub","Search","inputValue","setInputValue","inputStyle","backgroundColor","currentUrl","action","App","urlParams","PageParam","GroupsParam","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","Header","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.53dffcea.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCopy } from '@fortawesome/free-solid-svg-icons';\r\nimport { faClipboardCheck } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ninterface OpenLinkProps {\r\n  url: string;\r\n}\r\n\r\nfunction OpenLink({ url }: OpenLinkProps) {\r\n  const startUrl: string = window.location.href.split('?page')[0];\r\n  const [isCopied, setIsCopied] = useState(false);\r\n\r\n  const copyToClipboard = () => {\r\n    navigator.clipboard.writeText(startUrl + url);\r\n    setIsCopied(true);\r\n    setTimeout(() => {\r\n      setIsCopied(false);\r\n    },1000); // Reset the copied state after 1 seconds \r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"linkContainer\">\r\n        <a href={url} target=\"_blank\" className=\"linkButton\" type=\"submit\">Open calculator</a>\r\n      </div>\r\n      <div className=\"copyContainer\">\r\n        <input id=\"copyShowing\" type=\"text\" value={startUrl + url} readOnly />\r\n        <div className=\"copy-button\" onClick={copyToClipboard}>\r\n          <FontAwesomeIcon icon={isCopied?faClipboardCheck:faCopy} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OpenLink;\r\n","import React, { useState } from \"react\";\r\nimport '../src/css/buttons.css';\r\nimport OpenLink from \"./OpenLink\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\r\nimport '../src/css/form.css';\r\n\r\ninterface FormValues {\r\n  [key: string]: {\r\n    matter: string;\r\n    coefficient: string;\r\n  };\r\n}\r\n\r\nconst FormWithout = () => {\r\n\r\n  const [showButtons, setShowButtons] = useState(false);\r\n  const [url,setUrlLoad] = useState('');\r\n  const [values, setValues] = useState<FormValues>({});\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value, dataset } = event.target;\r\n    const index = dataset.index!;\r\n    const newValue = {\r\n      ...values[index],\r\n      [name]: value\r\n    };\r\n    setValues({ ...values, [index]: newValue });\r\n  };\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    const isEmpty = Object.values(values).every(\r\n      (value) => !value.matter && !value.coefficient\r\n    );\r\n\r\n    if(Object.keys(values).length === 0 || isEmpty){\r\n      console.log('no matters declared');\r\n    }else{\r\n      let url = '';\r\n      let t = false;\r\n      Object.keys(values).map((index) => {\r\n        if(t){\r\n          url+= ',';\r\n        }else{\r\n          t=true;\r\n        }\r\n        console.log(index);\r\n        url += values[index].matter+\":\"+values[index].coefficient.replace(',','!').replace('.','!');\r\n      });\r\n      const currentUrl = window.location.href;\r\n\r\n      url = '?page=calculator&subjects=' + url;\r\n\r\n      setUrlLoad(url);\r\n\r\n      setShowButtons(true);\r\n    }\r\n  };\r\n\r\n  const addNewPair = () => {\r\n    const index = Object.keys(values).length;\r\n    setValues({\r\n      ...values,\r\n      [index]: {\r\n        matter: \"\",\r\n        coefficient: \"\"\r\n      }\r\n    });\r\n    setShowButtons(false);\r\n  };\r\n\r\n  const removeMatter = (name: string) => {\r\n    const filteredValues = Object.fromEntries(\r\n      Object.entries(values).filter(([_, value]) => value.matter !== name)\r\n    );\r\n    setValues(filteredValues);\r\n    setShowButtons(false);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {Object.keys(values).map((index) => {\r\n        return (\r\n          <div key={index} className=\"wrapperMatter\">\r\n            <label htmlFor={`matter_${index}`}>Matter:</label>\r\n            <input\r\n              type=\"text\"\r\n              id={`matter_${index}`}\r\n              name=\"matter\"\r\n              pattern=\"[^:|!?=~]*\"\r\n              data-index={index}\r\n              value={values[index] ? values[index].matter : ''}\r\n              onChange={handleInputChange}\r\n              required\r\n            />\r\n\r\n            <label htmlFor={`coefficient_${index}`}>Coefficient:</label>\r\n            <div className=\"coeff\">\r\n                <input\r\n                type=\"number\"\r\n                id={`coefficient_${index}`}\r\n                name=\"coefficient\"\r\n                data-index={index}\r\n                value={values[index] ? values[index].coefficient : ''}\r\n                onChange={handleInputChange}\r\n                required\r\n              />\r\n              <div className=\"deleteButton\" onClick={() => removeMatter(values[index].matter)}>\r\n                <FontAwesomeIcon icon={faTrash} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n      <div className=\"wrapperButtons\">\r\n        <button type=\"button\" className=\"addButton\" onClick={addNewPair}>Add Matter</button>\r\n        <button type=\"submit\" >Generate</button>\r\n      </div>\r\n\r\n      <div>\r\n        {showButtons ? (\r\n          <OpenLink url={url} />\r\n        ) : (\r\n          null\r\n        )}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default FormWithout;\r\n","import React, { useState } from \"react\";\r\nimport '../src/css/buttons.css';\r\nimport OpenLink from \"./OpenLink\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { faChevronUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport '../src/css/form.css';\r\n\r\ninterface Matter {\r\n  name: string;\r\n  coefficient: string;\r\n}\r\n\r\ninterface Group {\r\n  name: string;\r\n  coefficient: string;\r\n  matters: Matter[];\r\n  visible: boolean;\r\n}\r\n\r\ninterface FormValues {\r\n  groups: Group[];\r\n}\r\n\r\nconst FormWith = () => {\r\n  const [showButtons, setShowButtons] = useState(false);\r\n  const [url,setUrlLoad] = useState('');\r\n  const [values, setValues] = useState<FormValues>({\r\n    groups: [{\r\n      name: \"\",\r\n      coefficient: \"\",\r\n      matters: [{ name: \"\", coefficient: \"\" }],\r\n      visible:true\r\n    }]\r\n  });\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value, dataset } = event.target;\r\n    const groupIndex:number = Number(dataset.groupIndex!);\r\n    const matterIndex = parseInt(dataset.matterIndex!, 10) as number;\r\n    \r\n\r\n    const group = values.groups[groupIndex];\r\n    const matter = group.matters[matterIndex];\r\n\r\n\r\n    let newGroup;\r\n    if(dataset.matterIndex){\r\n      const newMatter = {\r\n        ...matter,\r\n        [name]: value\r\n      };\r\n\r\n      const newMatters = [...group.matters];\r\n      newMatters[matterIndex] = newMatter;\r\n\r\n      newGroup = {\r\n        ...group,\r\n        matters: newMatters\r\n      };\r\n    }else{\r\n      const newMatter = {\r\n        ...matter\r\n      };\r\n\r\n      const newMatters = [...group.matters];\r\n      newMatters[matterIndex] = newMatter;\r\n\r\n      newGroup = {\r\n        ...group,\r\n        [name]:value,\r\n        matters: newMatters\r\n      };\r\n\r\n    }\r\n\r\n    const newGroups = [...values.groups];\r\n    newGroups[groupIndex] = newGroup;\r\n\r\n    setValues({ ...values, groups: newGroups });    \r\n  };\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    const isEmpty = values.groups.every((group) => {\r\n      return !group.matters.some((matter) => matter.name || matter.coefficient) && !group.name && !group.coefficient;\r\n    });\r\n\r\n    if(values.groups.length === 0 || isEmpty){\r\n      console.log('no matters or groups declared');\r\n    }else{\r\n      let verif:boolean = true;\r\n      values.groups.forEach(group => {\r\n        if(group.matters.length===0 || group.matters[0].name==='' || group.matters[0].coefficient===''){\r\n          console.log('missing a matter');\r\n          verif = false;\r\n          return;\r\n        }\r\n      });\r\n\r\n      \r\n      if(verif){\r\n        let url = '';\r\n        let t1 = false;\r\n        let t2 = false;\r\n\r\n        //group url\r\n        //?page=calculator&groups=Science:math$1!5|physic$4~2,Human%20Sciences:English$2!5|Art$3~2!5\r\n\r\n        values.groups.forEach((group, groupIndex) => {\r\n        if(t1){\r\n          url+= ',';\r\n        }else{\r\n          t1=true;\r\n        }          \r\n    \r\n          url += group.name + ':';\r\n          t2 = false;\r\n          group.matters.forEach((matter, matterIndex) => {\r\n            if(t2){\r\n              url+= '|';\r\n            }else{\r\n              t2=true;\r\n            }\r\n            url += matter.name + \"$\" + matter.coefficient.replace(',','!').replace('.','!');\r\n          });\r\n          url += '~' + group.coefficient;\r\n        });\r\n\r\n        const currentUrl = window.location.href;\r\n\r\n        url = '?page=calculator&groups=' + url;\r\n\r\n        setUrlLoad(url);\r\n\r\n        setShowButtons(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  const addNewGroup = () => {\r\n    const newGroup: Group = {\r\n      name: \"\",\r\n      coefficient: \"\",\r\n      matters: [{ name: \"\", coefficient: \"\" }],\r\n      visible:true\r\n    };\r\n    setValues({\r\n      ...values,\r\n      groups: [...values.groups, newGroup]\r\n    });\r\n    setShowButtons(false);\r\n  };\r\n\r\n  const removeGroup = (name: string) => {\r\n    if (!window.confirm('Are you sure to delete the group '+name)) {\r\n      return;\r\n    }\r\n    \r\n    const filteredValues = {\r\n      groups: values.groups.filter((group) => group.name !== name)\r\n    };\r\n    setValues(filteredValues);\r\n    setShowButtons(false);\r\n  };\r\n\r\n  const addNewMatter = (groupIndex: number) => {\r\n    const newMatter: Matter = {\r\n      name: \"\",\r\n      coefficient: \"\"\r\n    };\r\n\r\n    const group = values.groups[groupIndex];\r\n    const newMatters = [...group.matters, newMatter];\r\n    const newGroup = { ...group, matters: newMatters };\r\n    const newGroups = [...values.groups];\r\n    newGroups[groupIndex] = newGroup;\r\n\r\n    setValues({\r\n      ...values,\r\n      groups: newGroups\r\n    });\r\n    \r\n    setShowButtons(false);\r\n  };\r\n\r\n\r\n  const removeMatter = (name: string, groupIndex: number) => {\r\n    const group = values.groups[groupIndex];\r\n    const newMatters = group.matters.filter((matter) => matter.name !== name);\r\n    const newGroup = { ...group, matters: newMatters };\r\n    const newGroups = [...values.groups];\r\n    newGroups[groupIndex] = newGroup;\r\n    setValues({\r\n      ...values,\r\n      groups: newGroups\r\n    });\r\n\r\n    setShowButtons(false);\r\n  };\r\n\r\n  const switchVisibility = (groupIndex:number,topText:boolean=false) => {\r\n\r\n    if (!topText) {\r\n      values.groups[groupIndex].visible = !values.groups[groupIndex].visible;\r\n\r\n      setValues({\r\n        ...values\r\n      }); \r\n    }\r\n  }\r\n  \r\n\r\n  return (\r\n    <form className=\"form-with\" onSubmit={handleSubmit}>\r\n      {values.groups.map((group, groupIndex) => {\r\n        return ( \r\n        <div key={groupIndex}>\r\n          <div className=\"dropDown\">\r\n            <h2 className=\"groupTitle\" onClick={() => switchVisibility(groupIndex)}>{(group.name==='')?'_':group.name}</h2>\r\n            <div className=\"chevron\" onClick={() => switchVisibility(groupIndex)}>\r\n              <FontAwesomeIcon className=\"up\" icon={faChevronUp} style={{display : group.visible ? \"block\":\"none\"}}/>\r\n              <FontAwesomeIcon className=\"left\" icon={faChevronLeft} style={{display : group.visible ? \"none\":\"block\"}}/>\r\n            </div>\r\n          </div>\r\n          <div className=\"groupWrapper\" style={{display : group.visible ? \"block\":\"none\"}}>\r\n            <label htmlFor={`group_${groupIndex}`} className=\"groupLabel\">Group:</label>\r\n            \r\n            <input\r\n              className=\"GroupName\"\r\n              id={`group_${groupIndex}`}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"[^:|!?=~]*\"\r\n              value={group.name}\r\n              placeholder=\"Group's name\"\r\n              data-group-index={groupIndex}\r\n              onChange={handleInputChange}\r\n              required\r\n            />\r\n            <div className=\"coeff\">\r\n              <input\r\n                type=\"number\"\r\n                name=\"coefficient\"\r\n                value={group.coefficient}\r\n                placeholder=\"Group's coefficient\"\r\n                data-group-index={groupIndex}\r\n                onChange={handleInputChange}\r\n                required\r\n              />\r\n\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => removeGroup(group.name)}\r\n                  className=\"deleteButton groupStage\" >\r\n                  <FontAwesomeIcon icon={faTrash} />\r\n                </button>\r\n              </div>\r\n              <div>\r\n              {group.matters.map((matter, matterIndex) => {\r\n                return (\r\n                  <div key={matterIndex}>\r\n                    <label className=\"subTitle\" htmlFor={`matter_${matterIndex}`}>Matter {matterIndex+1}:</label>\r\n                    <input\r\n                      id={`matter_${matterIndex}`}\r\n                      type=\"text\"\r\n                      pattern=\"[^:|!?=~]*\"\r\n                      name=\"name\"\r\n                      value={matter.name}\r\n                      placeholder=\"Matter's name\"\r\n                      data-group-index={groupIndex}\r\n                      data-matter-index={matterIndex}\r\n                      onChange={handleInputChange}\r\n                      required\r\n                    />\r\n                    <div className=\"coeff\">\r\n                      <input\r\n                        id={`coeff_${matterIndex}`}\r\n                        type=\"number\"\r\n                        name=\"coefficient\"\r\n                        value={matter.coefficient}\r\n                        placeholder=\"Matter's coefficient\"\r\n                        data-group-index={groupIndex}\r\n                        data-matter-index={matterIndex}\r\n                        onChange={handleInputChange}\r\n                        required\r\n                      />\r\n                      <div className=\"deleteButton\" onClick={() => removeMatter(matter.name, groupIndex)}>\r\n                        <FontAwesomeIcon icon={faTrash} />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n          \r\n              <button\r\n                type=\"button\"\r\n                onClick={() => addNewMatter(groupIndex)}\r\n                className=\"addButton\" >\r\n                + Add Matter\r\n              </button>\r\n          \r\n            </div>\r\n          </div>\r\n          <div className=\"borderGroup\">\r\n          </div>\r\n        </div>\r\n        );\r\n      })}\r\n      <div className=\"wrapperButtons\">\r\n        <button type=\"button\" onClick={addNewGroup} className=\"groupStage\">\r\n            + Add Group\r\n        </button>\r\n        <button type=\"submit\" className=\"submit-btn\">\r\n          Generate\r\n        </button>\r\n        </div>\r\n      {!showButtons ? (\r\n        null\r\n      ) : (\r\n        <div className=\"open-link\">\r\n          <OpenLink url={url} />\r\n        </div>\r\n      )}\r\n    </form>\r\n    );\r\n    };\r\n    \r\n    export default FormWith;\r\n","/**\r\n * @author Maxence Malleret\r\n */\r\n\r\nimport React, { useState } from \"react\";\r\nimport '../src/css/App.css';\r\n\r\ninterface Group {\r\n  name: string,\r\n  coef: number;\r\n  matters: Subject[];\r\n}\r\n\r\ninterface Subject {\r\n  name: string;\r\n  coeff: number;\r\n}\r\n\r\nfunction GradeCalculatorWith() {\r\n  // LINK TO RESPECT\r\n  //?page=calculator&groups=Science:math$1!5|physic$4~2,Human%20Sciences:English$2!5|Art$3~2!5\r\n\r\n  // Retrieve the subjects and their coefficients from the URL\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n\r\n\r\n  const groupsParam  = urlParams.get(\"groups\");\r\n\r\n  const groups: Group[] = groupsParam\r\n  ? groupsParam.split(\",\").map((param) => {\r\n        //here are the value we get into param :\r\n        //Science:math(1!5)|physic(4)~2\r\n        //Human%20Sciences:English(2!5)|Art(3)~2!5\r\n\r\n        //we get the the name of the of the group + the subjects linked \r\n        const [name, subjects] = param.split(\":\");\r\n\r\n        //we get the coeff of the group with the ~ separator\r\n        const [matterString, numbCoeff] = subjects.split(\"~\");\r\n        \r\n        //we create the coeff as a Float\r\n        let coef;\r\n        if(numbCoeff==null){\r\n          throw new Error('$number not set');\r\n        }\r\n        if (numbCoeff.includes(\"!\")) {\r\n          coef = parseFloat(numbCoeff.replace(\"!\", \".\"));\r\n        } else {\r\n          coef = parseFloat(numbCoeff);\r\n        }\r\n\r\n        //we get a tab of all the matters linked\r\n        const tabMatterString = matterString.split(\"|\");\r\n        \r\n        console.log(tabMatterString);\r\n        \r\n\r\n        //we create all the the Matters \r\n        //in a tab of Matters\r\n        let matters:Subject[] = [];\r\n        tabMatterString.forEach((param) => {\r\n            //we get the values of the coeff\r\n            //we use the \"$\" splitter to get coeff and matter        \r\n            const [mattersName,mattersCoef] = param.split('$');\r\n\r\n            let coefMatter;\r\n            if(numbCoeff===null){\r\n              throw new Error('$number not set');\r\n            }\r\n            if (mattersCoef.includes(\"!\")) {\r\n              coefMatter = parseFloat(mattersCoef.replace(\"!\", \".\"));\r\n            } else {\r\n              coefMatter = parseFloat(mattersCoef);\r\n            }\r\n\r\n            console.log(mattersName + coefMatter);\r\n            \r\n\r\n            matters = [\r\n              ...matters,\r\n              {\r\n                name: mattersName,\r\n                coeff: coefMatter\r\n              }\r\n            ];\r\n        })\r\n\r\n        //we return the whole thing as a tab of group\r\n        return {name, coef, matters};\r\n      })\r\n    : [];\r\n\r\n  // Define the state for the marks of each subject\r\n  const [marks, setMarks] = useState<{ [key: string]: string }>(() => {\r\n    const initialMarks: { [key: string]: string } = {};\r\n    groups.forEach(group => {\r\n      group.matters.forEach(subject => {\r\n        initialMarks[subject.name] = \"\";\r\n      });\r\n    });\r\n    return initialMarks;\r\n  });\r\n\r\n\r\n  // Define the function to handle form submissions\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    let totalCoeff = 0;\r\n    let totalPoints = 0;\r\n    groups.forEach((group) => {\r\n      let groupCoeff = 0;\r\n      let groupPoints = 0;\r\n      group.matters.forEach((matter) => {\r\n        if(matter.coeff!=0){\r\n          groupCoeff += matter.coeff;\r\n          groupPoints += parseFloat(marks[matter.name])*matter.coeff;\r\n        }\r\n      });\r\n      totalCoeff += group.coef;\r\n      totalPoints += (groupPoints / groupCoeff)*group.coef;\r\n    });\r\n    \r\n    const finalGrade = totalPoints / totalCoeff;\r\n\r\n    alert(`Your final grade is ${finalGrade.toFixed(2)}`);\r\n  };\r\n\r\n  // Define the function to handle changes to the marks\r\n  const handleMarkChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = event.target;\r\n    \r\n    setMarks({ ...marks, [name]: value });\r\n  };\r\n\r\n  // Render the form\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n\r\n      {groups.map((group) => (\r\n        <div key={group.name}>\r\n          <label className=\"groupName\">{group.name} ({group.coef})</label>\r\n          {group.matters.map((subject) => (\r\n            <div key={subject.name}>\r\n              <label htmlFor={subject.name} > - {subject.name} ({subject.coeff}) </label>\r\n              <input type=\"number\" name={subject.name} value={marks[subject.name]} onChange={handleMarkChange} />\r\n          </div>\r\n          ))}\r\n        </div>\r\n      ))}\r\n      <button type=\"submit\">Calculate final grade</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default GradeCalculatorWith;\r\n","import React, { useState } from \"react\";\r\nimport '../src/css/App.css';\r\n\r\n\r\ninterface Subject {\r\n  name: string;\r\n  coeff: number;\r\n}\r\n\r\nfunction GradeCalculatorWithout() {\r\n  // Retrieve the subjects and their coefficients from the URL\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  const subjectsParam = urlParams.get(\"subjects\");\r\n  const subjects: Subject[] = subjectsParam\r\n    ? subjectsParam.split(\",\").map((param) => {\r\n        const [name, coeff] = param.split(\":\");\r\n        let cNumb: number;\r\n        if (coeff.includes(\"!\")) {\r\n          cNumb = parseFloat(coeff.replace(\"!\", \".\"));\r\n        } else {\r\n          cNumb = parseInt(coeff);\r\n        }\r\n        console.log(cNumb);\r\n        return { name, coeff: cNumb };\r\n      })\r\n    : [];\r\n\r\n  // Define the state for the marks of each subject\r\n  const [marks, setMarks] = useState<{ [key: string]: string }>(\r\n    subjects.reduce((acc, subject) => ({ ...acc, [subject.name]: \"\" }), {})\r\n  );\r\n\r\n  // Define the function to handle form submissions\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    // Calculate the final grade using the marks and coefficients\r\n    let totalGrade = 0;\r\n    let totalCoeff = 0;\r\n\r\n    subjects.forEach((subject) => {\r\n      if(subject.coeff!=0){\r\n        totalCoeff += subject.coeff;\r\n        totalGrade += parseFloat(marks[subject.name]) * subject.coeff;\r\n      }\r\n    })\r\n\r\n    const finalGrade = totalGrade / totalCoeff;\r\n\r\n    // Display the final grade\r\n    alert(`Your final grade is ${finalGrade.toFixed(2)}`);\r\n  };\r\n\r\n  // Define the function to handle changes to the marks\r\n  const handleMarkChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = event.target;\r\n    setMarks({ ...marks, [name]: value });\r\n  };\r\n\r\n  // Render the form\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {subjects.map((subject) => (\r\n        <div key={subject.name}>\r\n          <label htmlFor={subject.name} > {subject.name} ({subject.coeff}) </label>\r\n            <input type=\"number\" name={subject.name} value={marks[subject.name]} onChange={handleMarkChange} required/>\r\n          \r\n        </div>\r\n      ))}\r\n      <button type=\"submit\">Calculate final grade</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default GradeCalculatorWithout;","\r\n\r\nimport React, { useState } from \"react\";\r\n\r\n\r\nconst Error = () => {\r\n\r\n  //when you submit the code :\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    \r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n        ERREUR 404 : Page introuvable\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Error;\r\n","\r\n\r\nimport React from \"react\";\r\nimport '../src/css/home.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter, faInstagram, faLinkedin, faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\n\r\nconst Home = () => {\r\n\r\n  return (\r\n    <div className=\"homeDiv\">\r\n        <h1 >Welcome to medie generali</h1>\r\n        \r\n        <div className=\"desc\">\r\n          <p>\r\n            This website was made by a simple student who wants to help people who need to find out their average grade.\r\n          <br/>\r\n          <br/>\r\n          You can either create yourself a generator of average grade where you will choose yourself the differents matters and their coefficents. \r\n          <br/>Or you can use a link someone gave you with already everything setup, and so you'll just have to put your grades and find out your average.\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"socials\">\r\n          <a href=\"https://twitter.com/ignisfr\" target=\"_blank\">\r\n            <FontAwesomeIcon icon={faTwitter} />\r\n          </a>\r\n          <a href=\"https://www.instagram.com/maxencequi\" target=\"_blank\">\r\n            <FontAwesomeIcon icon={faInstagram} />\r\n          </a>\r\n          <a href=\"https://www.linkedin.com/in/maxence-malleret1/\" target=\"_blank\">\r\n            <FontAwesomeIcon icon={faLinkedin} />\r\n          </a>\r\n          <a href=\"https://github.com/Igniiis\" target=\"_blank\">\r\n            <FontAwesomeIcon icon={faGithub} />\r\n          </a>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;","import React, { useState } from \"react\";\r\n\r\n\r\nconst Search = () => {\r\n\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  //when you submit the code :\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    const currentUrl = window.location.href;\r\n\r\n    console.log('The form action has been changed to', inputValue,currentUrl);\r\n    \r\n    if (inputValue) {\r\n      window.location.href = inputValue;      \r\n    }else{\r\n      //TODO\r\n    }\r\n  };\r\n\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const inputStyle = {\r\n    backgroundColor: inputValue === \"\" ? \"#615D6C\" : \"#80b918\",\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} action={inputValue}>\r\n      <label htmlFor=\"url_input\">Link of the calculator :</label>\r\n      <input \r\n      type=\"url\" \r\n      name=\"url_input\"\r\n      value={inputValue}\r\n      onChange={handleInputChange}\r\n      placeholder=\"paste your copied url here\"\r\n      required \r\n      />\r\n\r\n      <div className=\"notes\">\r\n        <p>\r\n          Note : you can use your copied link directly onto your browser to open the same window.\r\n        </p>\r\n      </div>\r\n\r\n      <button type=\"submit\" style={inputStyle}>Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useState } from \"react\";\nimport FormWithout from './FormWithout';\nimport FormWith from './FormWith';\nimport GradeCalculatorWith from \"./GradeCalculatorWith\";\nimport GradeCalculatorWithout from \"./GradeCalculatorWithout\";\nimport Error from \"./Error\";\nimport Home from \"./Home\";\nimport Search from \"./Search\";\n\n\nfunction App() {\n  // Retrieve the subjects and their coefficients from the URL\n  const urlParams = new URLSearchParams(window.location.search);\n  const PageParam = urlParams.get('page');\n  const GroupsParam = urlParams.get(\"groups\");\n\n\n  switch (PageParam) {\n    case 'home':\n      return <Home />;\n    case 'generator!with':\n      return <FormWith />;\n    case 'generator!without':\n      return <FormWithout />;\n    case 'calculator':\n      if(GroupsParam=='' || GroupsParam==null){\n        return <GradeCalculatorWithout />;\n      }else{\n        return <GradeCalculatorWith />;\n      }\n    case 'search':\n      return <Search />;\n    case null:\n      return <Home />  \n    default:      \n      return <Error />;\n  }  \n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport '../src/css/header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <nav>\r\n        <ul className='topList'>\r\n          <li className='topLine'><a href='./?page=home'>Home</a></li>\r\n          \r\n          <div className='show'>\r\n            <li className='topLine'><a id=\"generator\" href='./?page=generator!without'>Create a grade calculator</a></li>\r\n            <ul className='list-categories'>\r\n                <li><a href=\"./?page=generator!with\">with groups</a></li>\r\n                <li><a href=\"./?page=generator!without\">without groups</a></li>\r\n            </ul>\r\n          </div>\r\n          <li className='topLine'><a href=\"./?page=search\">Open a grade</a></li>\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport '../src/css/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Header from './header';\nimport { languageGeneration } from './language';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\n\n//Generate the website in the language of the browser\n//languageGeneration();\n\nroot.render(\n  <div>\n    <Header />\n    <App />\n  </div>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}